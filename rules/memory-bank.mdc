---
description: Defines Persistent Memory Bank for Cursor across sessions.
globs:
alwaysApply: true
---

# Cursor Memory Bank: Core Rules (101)

This rule defines Cursor's Persistent Memory system using a structured file-based approach. The Memory Bank enables Cursor to maintain project continuity across sessions by reading, interpreting, and updating Markdown files that document the full context and state of the project.

**Cursor MUST read all required Memory Bank files at the start of every task.**

---

## Memory Bank Hierarchy

```mermaid
flowchart TD
    PRD[@docs/prd.md] --> ARCH[@docs/architecture.md]
    PRD --> STORIES[@memory-bank/stories.md]
    PRD --> README[README.md]
    ARCH --> ACTIVE[@memory-bank/active_context.md]
    STORIES --> ACTIVE
    README --> ACTIVE
    ACTIVE --> ERROR[@memory-bank/error-documentation.mdc]
    ACTIVE --> LESSONS[@memory-bank/lessons-learned.mdc]
```

---

Core Files (Required)
	1.	@docs/prd.md â€“ Product Requirement Document
	2.	@docs/architecture.md â€“ System Architecture & Design
	3.	README.md â€“ Project Stack, Setup, Overview
	4.	@memory-bank/stories.md â€“ Feature/Task Backlog and Progress
	5.	@memory-bank/active_context.md â€“ Current Development Focus
	6.	@memory-bank/error-documentation.mdc â€“ Known Errors & Fixes
	7.	@memory-bank/lessons-learned.mdc â€“ Patterns, Preferences, Project Wisdom

â¸»

Context Files (Optional)
	â€¢	@docs/literature/ â€“ Research or background context (LaTeX files)
	â€¢	@tasks/rfc/ â€“ Detailed RFCs for individual tasks (LaTeX files)

â¸»

Key Principles
	â€¢	Always-on memory: Cursor operates under the assumption that all core memory files exist and must be consulted before any code or decision work.
	â€¢	Two operational modes: PLAN MODE (think, propose) and ACT MODE (implement).
	â€¢	Autonomous enforcement: Cursor proactively reads and uses memoryâ€”even without user prompt.
	â€¢	Documentation discipline: Every plan, implementation, error, and insight must be mirrored back into the Memory Bank.

â¸»

Execution Logic

Cursor MUST follow all implementation behaviors defined in:

ðŸ“˜ .cursor/rules/102-memory-implementation.mdc

This includes:
	â€¢	Mode detection and workflows
	â€¢	Documentation updates
	â€¢	Lessons and errors handling
	â€¢	Full use of .mdc, .md, .tex context as outlined

â¸»

On Session Start
	1.	Read ALL Memory Bank core files
	2.	Load PLAN or ACT mode based on current task
	3.	If any file is missing or outdated â†’ pause and document what needs to be created or updated
	4.	Reference lessons-learned.mdc and error-documentation.mdc for reuse patterns or recent issues

â¸»

Explicit Command Triggers (if needed)
	â€¢	MODE = PLAN MODE â†’ Triggers planning behavior
	â€¢	MODE = ACT MODE â†’ Triggers implementation behavior
	â€¢	update memory files â†’ Triggers full documentation refresh cycle
	â€¢	enforce memory â†’ Forces reread of all memory and rules

â¸»

File Conventions
	â€¢	Use Markdown (.md) for most documents
	â€¢	Use .mdc for rule-bound behavior and documentation
	â€¢	Use .tex inside RFCs or Literature if precision formatting is needed

â¸»

Important: The Memory Bank is your ONLY persistent project state. Cursor must treat it as the full source of truthâ€”everything else is ephemeral.

